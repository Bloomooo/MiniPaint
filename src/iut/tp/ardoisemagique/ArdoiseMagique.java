/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package iut.tp.ardoisemagique;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Toolkit;
import javax.swing.JColorChooser;
import iut.tp.ardoisemagique.models.Tool;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;

/**
 * La classe ArdoiseMagique est la classe principal qui est une jframe qui va
 * contenir mes composants et va
 * contenir les élements slate
 * qui va implementer l'interface idrawer
 * 
 * @author Yanis Mechta
 */
public class ArdoiseMagique extends javax.swing.JFrame implements IDrawer {

    /**
     * Constructeur de la classe ArdoiseMagique.
     * Initialise les composants de l'interface graphique et configure la fenêtre.
     */
    public ArdoiseMagique() {
        initComponents();
        this.setTitle("Ardoise Magique");
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - getHeight()) / 2);

        setLocation(x, y);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents

    /**
     * Initialise les composants de l'interface graphique.
     */
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        newMenuItem = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jToggleButton2);
        jToggleButton2.setIcon(
                new javax.swing.ImageIcon(getClass().getResource("/iut/tp/ardoisemagique/assets/chooser.png"))); // NOI18N
        jToggleButton2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jToggleButton2MouseDragged(evt);
            }
        });
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jToggleButton3);
        jToggleButton3
                .setIcon(new javax.swing.ImageIcon(getClass().getResource("/iut/tp/ardoisemagique/assets/round.png"))); // NOI18N
        jToggleButton3.setSelected(true);
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jToggleButton4);
        jToggleButton4
                .setIcon(new javax.swing.ImageIcon(getClass().getResource("/iut/tp/ardoisemagique/assets/square.png"))); // NOI18N
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),
                "Propriété"));
        jPanel5.setToolTipText("");
        jPanel5.setAutoscrolls(true);
        jPanel5.setEnabled(false);
        jPanel5.setName("Propriété"); // NOI18N

        jSpinner1.setEnabled(false);
        jSpinner1.setValue(5);

        jCheckBox1.setText("Lisser");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Px");
        jLabel1.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addContainerGap(14, Short.MAX_VALUE)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 64,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addGap(20, 20, 20))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jCheckBox1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox1)
                                .addContainerGap(12, Short.MAX_VALUE)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addContainerGap())
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jToggleButton2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jToggleButton3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jToggleButton4)
                                                .addGap(0, 0, Short.MAX_VALUE)))));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 27,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                                Short.MAX_VALUE)
                                        .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
                                                Short.MAX_VALUE))
                                .addGap(37, 37, 37)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(281, Short.MAX_VALUE)));

        jPanel5.getAccessibleContext().setAccessibleName("");

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_END);

        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel2.setText("Zoom:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226,
                                        Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 194,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(175, 175, 175)));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(3, 3, 3))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(0, 12, Short.MAX_VALUE)
                                                .addGroup(jPanel3Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel2))))
                                .addContainerGap()));

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBackground(new java.awt.Color(31, 31, 31));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 902, Short.MAX_VALUE));
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 688, Short.MAX_VALUE));

        jScrollPane2.setViewportView(jPanel4);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        newMenuItem.setText("Fichier");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Nouveau...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuItem1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuItem1KeyPressed(evt);
            }
        });
        newMenuItem.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Ouvrir...");
        jMenuItem2.setEnabled(false);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        newMenuItem.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("Enregistrer");
        jMenuItem3.setEnabled(false);
        newMenuItem.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S,
                java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Enregister sous...");
        jMenuItem4.setEnabled(false);
        newMenuItem.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q,
                java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Quitter");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        newMenuItem.add(jMenuItem5);

        jMenuBar1.add(newMenuItem);

        jMenu2.setText("Edition");
        jMenu2.setEnabled(false);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Gère l'événement de clic sur le bouton jToggleButton4.
     * Active les composants jSpinner1, jCheckBox1, jLabel1 et jPanel5.
     *
     * @param evt L'événement ActionEvent représentant le clic sur le bouton
     *            jToggleButton4
     */

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jToggleButton4ActionPerformed
        jSpinner1.setEnabled(true);
        jCheckBox1.setEnabled(true);
        jLabel1.setEnabled(true);
        jPanel5.setEnabled(true);
    }// GEN-LAST:event_jToggleButton4ActionPerformed

    /**
     * Gère l'événement de clic sur le bouton jToggleButton3.
     * Active les composants jSpinner1, jCheckBox1, jLabel1 et jPanel5.
     *
     * @param evt L'événement ActionEvent représentant le clic sur le bouton
     *            jToggleButton3
     */
    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jToggleButton3ActionPerformed
        jSpinner1.setEnabled(true);
        jCheckBox1.setEnabled(true);
        jLabel1.setEnabled(true);
        jPanel5.setEnabled(true);
    }// GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton2MouseDragged(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jToggleButton2MouseDragged

    }// GEN-LAST:event_jToggleButton2MouseDragged

    /**
     * Gère l'événement de changement d'état du jSlider1.
     * Met à jour l'échelle de la toile Slate en fonction de la valeur du jSlider1.
     *
     * @param evt L'événement ChangeEvent représentant le changement d'état du
     *            jSlider1
     */
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSlider1StateChanged
        if (this.slate != null)
            this.slate.setScale((this.jSlider1.getValue() / 10 + 1));
    }// GEN-LAST:event_jSlider1StateChanged

    /**
     * Gère l'événement de clic sur le bouton jToggleButton2.
     * Désactive les composants jSpinner1, jCheckBox1, jLabel1 et jPanel5.
     *
     * @param evt L'événement ActionEvent représentant le clic sur le bouton
     *            jToggleButton2
     */
    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jToggleButton2ActionPerformed
        jSpinner1.setEnabled(false);
        jCheckBox1.setEnabled(false);
        jLabel1.setEnabled(false);
        jPanel5.setEnabled(false);
        // Charger l'image de la pipette

    }// GEN-LAST:event_jToggleButton2ActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_newMenuItemActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem5ActionPerformed
        System.exit(0);
    }// GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * Gère l'événement de clic sur le bouton jButton1.
     * Affiche une boîte de dialogue de sélection de couleur et met à jour la
     * couleur du bouton jButton1 en conséquence.
     *
     * @param evt L'événement ActionEvent représentant le clic sur le bouton
     *            jButton1
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        java.awt.Color color = JColorChooser.showDialog(null, "Choix de la couleur", Color.RED);
        jButton1.setBackground(color);

    }// GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * Gère l'événement de clic sur l'élément de menu jMenuItem1.
     * Affiche une boîte de dialogue pour créer une nouvelle toile Slate en fonction
     * des dimensions spécifiées.
     * Si des dimensions sont sélectionnées, crée une nouvelle toile Slate.
     *
     * @param evt L'événement ActionEvent représentant le clic sur l'élément de menu
     *            jMenuItem1
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
        NewDialog newDialog = new NewDialog(null, true);
        Dimension dimension = newDialog.showDialog();
        if (dimension != null) {
            createNewSlate(dimension);
        }
    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem1KeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_jMenuItem1KeyPressed
        // TODO add yourhandling code here:
    }// GEN-LAST:event_jMenuItem1KeyPressed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                        .getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArdoiseMagique.class.getName()).log(
                    java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArdoiseMagique.class.getName()).log(
                    java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArdoiseMagique.class.getName()).log(
                    java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArdoiseMagique.class.getName()).log(
                    java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArdoiseMagique().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JMenu newMenuItem;

    // End of variables declaration//GEN-END:variables
    /**
     * La toile de dessin (Slate) associée à cette classe.
     */
    private Slate slate;

    /**
     * Crée une nouvelle ardoise avec les dimensions spécifiées.
     * 
     * @param dimension Les dimensions de l'ardoise.
     */
    private void createNewSlate(Dimension dimension) {
        jSpinner1.setEnabled(true);
        jCheckBox1.setEnabled(true);
        jLabel1.setEnabled(true);
        jPanel5.setEnabled(true);
        if (slate != null) {
            jPanel4.remove(slate);
        }
        jPanel4.removeAll();
        jPanel4.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        slate = new Slate(dimension, this);
        slate.setBackground(Color.white);
        slate.addMouseListener(new MouseAdapter() {
            /**
             * Gère l'événement de survol de la souris.
             * Ajoute un écouteur d'événements de déplacement de la souris qui met à jour le
             * texte de jLabel3 avec les coordonnées X et Y du curseur.
             *
             * @param e L'événement MouseEvent représentant le survol de la souris
             */
            @Override
            public void mouseEntered(MouseEvent e) {
                slate.addMouseMotionListener(new MouseMotionAdapter() {
                    @Override
                    public void mouseMoved(MouseEvent e) {
                        jLabel3.setText("X:Y = " + e.getX() + ":" + e.getY());
                    }
                });
            }

            /**
             * Gère l'événement de sortie de la souris.
             * Réinitialise le texte de jLabel3 en le laissant vide.
             *
             * @param e L'événement MouseEvent représentant la sortie de la souris
             */
            @Override
            public void mouseExited(MouseEvent e) {
                jLabel3.setText("");
            }

            /**
             * Gère l'événement de clic de souris.
             * Transmet l'événement à l'objet Slate pour qu'il puisse être traité.
             *
             * @param e L'événement MouseEvent représentant le clic de souris
             */
            @Override
            public void mouseClicked(MouseEvent e) {
                slate.mouseClicked(e);
            }

        });

        jPanel4.add(slate);
        jPanel4.revalidate();
        jPanel4.repaint();
    }

    /**
     * Renvoie la couleur actuelle de l'ardoise.
     * 
     * @return La couleur actuelle de l'ardoise.
     */

    @Override
    public Color getSlateColor() {
        return jButton1.getBackground();
    }

    /**
     * Renvoie l'outil actuel de l'ardoise.
     * 
     * @return L'outil actuel de l'ardoise.
     */
    @Override
    public Tool getSlateTool() {

        if (jToggleButton2.isSelected()) {

            return Tool.CHOOSER;

        } else if (jToggleButton3.isSelected()) {

            return Tool.ROUND;

        } else if (jToggleButton4.isSelected()) {

            return Tool.SQUARE;
        }
        return null;
    }

    /**
     * Renvoie la taille actuelle de l'outil de l'ardoise.
     * 
     * @return La taille actuelle de l'outil de l'ardoise.
     */
    @Override
    public int getSlateToolSize() {

        return Integer.parseInt(jSpinner1.getValue().toString());
    }

    /**
     * Vérifie si l'ardoise utilise un rendu lisse.
     * 
     * @return Vrai si l'ardoise utilise un rendu lisse, sinon faux.
     */
    @Override
    public boolean isSlateSmooth() {
        if (jCheckBox1.isSelected()) {
            return true;
        }
        return false;
    }

    /**
     * Appelé lorsqu'une nouvelle couleur est choisie dans l'ardoise.
     * 
     * @param newColor La nouvelle couleur choisie.
     */
    @Override
    public void newColorChoosen(Color newColor) {
        jButton1.setBackground(newColor);
    }

    /**
     * Appelé lorsqu'une nouvelle position de souris est détectée dans l'ardoise.
     * 
     * @param point La position de souris détectée.
     */
    @Override
    public void newMousePosition(Point point) {
        point.getX();
        point.getY();
    }

}
